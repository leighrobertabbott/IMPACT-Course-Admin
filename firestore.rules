rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Candidates collection - allow unauthenticated users to create applications, authenticated users can read/write
    match /candidates/{candidateId} {
      allow create: if true; // Allow anyone to create applications
      allow read, write: if request.auth != null; // Only authenticated users can read/update
    }
    
    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Admin settings - only admins can access
    match /admin/{document=**} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Course settings - read for all users (including public), write for admins
    match /courses/{courseId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Faculty collection - read for all authenticated users, write for admins
    match /faculty/{facultyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Course materials collection - read for all authenticated users, write for admins
    match /courseMaterials/{materialId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Assessments collection - read for all authenticated users, write for admins
    match /assessments/{assessmentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Unsuccessful candidates collection - read for all authenticated users, write for admins
    match /unsuccessfulCandidates/{candidateId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Email templates collection - read for all authenticated users, write for admins
match /emailTemplates/{templateId} {
  allow read: if request.auth != null;
  allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}

// Programme subjects collection - read for all authenticated users, write for admins
match /programmeSubjects/{subjectId} {
  allow read: if request.auth != null;
  allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}

// Notifications collection - allow unauthenticated users to create notifications, authenticated users can read/write
match /notifications/{notificationId} {
  allow create: if true; // Allow anyone to create notifications (for application submissions)
  allow read: if request.auth != null;
  allow write: if request.auth != null && (
    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'general-office'
  );
}

// Programme templates collection - read for all authenticated users, write for admins
match /programmeTemplates/{templateId} {
  allow read: if request.auth != null;
  allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}

// Locations collection - read for all authenticated users, write for admins
match /locations/{locationId} {
  allow read: if request.auth != null;
  allow write: if request.auth != null;
}
  }
}
